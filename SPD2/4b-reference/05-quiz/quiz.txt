 Questions 3-5 (1/3 points)

Consider the following partially obscured types comments:

ListA is one of:
 - empty
 - (cons "yes" ListA)
 - (cons "no" ListA)

;; Template 2
(define (fn-for-listA l)
 (cond [(empty?) (...)]
       [//////  (... (first l)
                     (fn-for-listA (rest l)))]
       [else
        (... (first l)
	     (fn-for-listA (rest l)))]))


ListB is one of:
 - empty
 - (cons String ListB)

;; Template3
(define (fn-for-listB l)
  (cond [(empty? l) (...)])
        [else
	   (... (first l)
	        (fn-for-listB (rest l)))])

ListC is one of:
 - (cons String empty)
 - (cons String ListC)

;; Template 1
(define (fn-for-listC l)
  (cond [(empty? (rest l)) (...)]
  	[else
	  (... (first l)
	       (fn-for-listC (rest l)))]))
	       
======================================================================


======================================================================

 Question 10 (1/1 point)

Consider the following Data Definitions:

(define-struct concert (artist venue))
;; Concert is (make-concert String String)
;; interp. a concert with the band playing, and the venue they're playing at
(define C1 (make-concert "Shakey Graves" "Commodore Ballroom"))
(define C2 (make-concert "Tallest Man On Earth" "Orpheum Theatre"))
#;
(define (fn-for-concert c)
  (... (concert-artist c)
         (fn-for-venue (concert-venue c))))

;; ListOfConcert is one of:
;; - empty
;; - (cons Concert ListOfConcert)
;; interp. a list of concerts
(define LOC1 empty)
(define LOC2 (cons C1 (cons C2 empty)))
#;
(define (fn-for-loc loc)
  (cond [(empty? loc)(...)]
          [else
	           (... (fn-for-concert (first loc))
		                 (fn-for-loc (rest loc)))]))

(define-struct festival (name shows))
;; Festival is (make-festival String ListOfConcert)
;; interp. a festival with name, and list of shows that are part of the festival
(define CANCELLED-FESTIVAL (make-festival "" empty))
(define VFMF (make-festival "Vancouver Folk Music Festival"
                            (cons (make-concert "Hawksley Workman" "Main Stage")
			                                      (cons (make-concert "Grace Petrie" "Stage 1")
							                                              (cons (make-concert "Mary Gauthier" "Stage 5") empty)))))
												      #;
												      (define (fn-for-festival f)
												        (... (festival-name f))
													       (cond [(empty? (festival-shows f))(...)]
													                    [else
															                  (... (fn-for-concert (first (festival-shows f)))
																	                     (fn-for-festival (rest (festival-shows f))))]))
																			     
------------------------------
ListOfConcert

======================================================================

Question 11 (1/1 point)

Use the options below to create the correct template rules for ListOfConcert.

You can use up to six template rules, but you do not need to use all the space.

Note, if you drap the options out of the bar at the bottom, they become bigger and you will be able to read the template rules.

======================================================================

Question 12 (1/1 point)

We want to design a function called festival-schedule that produces the lineup of a festival as a list of the bands and where they're performing as a list of strings.

So (festival-schedule VFMF) should produce
(cons "Hawksley Workman: Main Stage" (cons "Grace Petrie: Stage 1" (cons "Mary Gauthier: Stage 1" empty)))

;; Festival -> ListOfString
;; produces a list of each band paired with where they are performing
(check-expect (festival-schedule (make-festival "" empty)) empty)
(check-expect (festival-schedule (make-festival "CFMF"
                                                (cons (make-concert "Father John Misty" "Main Stage") empty)))
						              (cons "Father John Misty: Main Stage" empty))
							      (define (festival-schedule f) f)   ; stub

Which of the following statements is true?

------------------------------

The individual check-expects are each correct, but we need additional or different one(s) 

======================================================================

 Question 13 (1/1 point)

Assume you have a function called display-concert with the following signature, purpose and stub.

;; Concert -> String
;; produce the name and venue of a concert, separated with a colon, as a string
(define (display-concert c) "")  ;stub

You design the function festival-schedule and wish for a function called shcedule-loc. The completed function body for festival-schedule is:

(define (festival-schedule f)
    (schedule-loc (festival-shows f)))

Your wish list entry for schedule-loc is:

;; ListOfConcert -> ListOfString
;; given a list of concerts, produce a list of each artist paired with where they are performing.
(define (schedule-loc loc) empty)  ;stub

Which of the following definitions is correct for schedule-loc?

------------------------------

(define (schedule-loc loc)
  (cond [(empty? loc) empty]
          [else
	           (cons (display-concert (first loc))
		                  (schedule-loc (rest loc)))]))


======================================================================

 Question 14 (1 point possible)

Suppose you want to change the definition of festival to have three fields: the name, the headlining Concert, and all the other shows in the festival.

The new type is:

(define-struct festival (name headliner shows))
;; Festival is (make-festival String Concert ListOfConcert)

Write the new template for Festival.

Which elements are included in the new template (select all that apply)?

------------------------------

(define (fn-for-festival f)
  (... (festival-name f)
         (fn-for-concert (festival-headliner f))
	        (fn-for-loc (festival-shows f))))
